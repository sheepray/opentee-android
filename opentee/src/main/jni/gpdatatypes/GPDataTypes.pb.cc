// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GPDataTypes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GPDataTypes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fi {
namespace aalto {
namespace ssg {
namespace opentee {
namespace imps {
namespace pbdatatypes {

namespace {

const ::google::protobuf::Descriptor* TeecOperation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeecOperation_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeecParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeecParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeecSharedMemory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeecSharedMemory_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeecSharedMemoryReference_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeecSharedMemoryReference_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeecValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeecValue_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GPDataTypes_2eproto() {
  protobuf_AddDesc_GPDataTypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GPDataTypes.proto");
  GOOGLE_CHECK(file != NULL);
  TeecOperation_descriptor_ = file->message_type(0);
  static const int TeecOperation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeecOperation, mstarted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeecOperation, mparams_),
  };
  TeecOperation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeecOperation_descriptor_,
      TeecOperation::default_instance_,
      TeecOperation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeecOperation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeecOperation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeecOperation));
  TeecParameter_descriptor_ = file->message_type(1);
  static const int TeecParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeecParameter, teecsharedmemory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeecParameter, teecvalue_),
  };
  TeecParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeecParameter_descriptor_,
      TeecParameter::default_instance_,
      TeecParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeecParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeecParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeecParameter));
  TeecSharedMemory_descriptor_ = file->message_type(2);
  static const int TeecSharedMemory_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeecSharedMemory, mbuffer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeecSharedMemory, mflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeecSharedMemory, mreturnsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeecSharedMemory, mid_),
  };
  TeecSharedMemory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeecSharedMemory_descriptor_,
      TeecSharedMemory::default_instance_,
      TeecSharedMemory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeecSharedMemory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeecSharedMemory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeecSharedMemory));
  TeecSharedMemoryReference_descriptor_ = file->message_type(3);
  static const int TeecSharedMemoryReference_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeecSharedMemoryReference, parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeecSharedMemoryReference, moffset_),
  };
  TeecSharedMemoryReference_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeecSharedMemoryReference_descriptor_,
      TeecSharedMemoryReference::default_instance_,
      TeecSharedMemoryReference_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeecSharedMemoryReference, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeecSharedMemoryReference, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeecSharedMemoryReference));
  TeecValue_descriptor_ = file->message_type(4);
  static const int TeecValue_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeecValue, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeecValue, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeecValue, mflag_),
  };
  TeecValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeecValue_descriptor_,
      TeecValue::default_instance_,
      TeecValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeecValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeecValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeecValue));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GPDataTypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeecOperation_descriptor_, &TeecOperation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeecParameter_descriptor_, &TeecParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeecSharedMemory_descriptor_, &TeecSharedMemory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeecSharedMemoryReference_descriptor_, &TeecSharedMemoryReference::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeecValue_descriptor_, &TeecValue::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GPDataTypes_2eproto() {
  delete TeecOperation::default_instance_;
  delete TeecOperation_reflection_;
  delete TeecParameter::default_instance_;
  delete TeecParameter_reflection_;
  delete TeecSharedMemory::default_instance_;
  delete TeecSharedMemory_reflection_;
  delete TeecSharedMemoryReference::default_instance_;
  delete TeecSharedMemoryReference_reflection_;
  delete TeecValue::default_instance_;
  delete TeecValue_reflection_;
}

void protobuf_AddDesc_GPDataTypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021GPDataTypes.proto\022%fi.aalto.ssg.opente"
    "e.imps.pbdatatypes\"h\n\rTeecOperation\022\020\n\010m"
    "Started\030\001 \002(\005\022E\n\007mParams\030\002 \002(\01324.fi.aalt"
    "o.ssg.opentee.imps.pbdatatypes.TeecParam"
    "eter\"\247\001\n\rTeecParameter\022Q\n\020teecSharedMemo"
    "ry\030\001 \001(\01327.fi.aalto.ssg.opentee.imps.pbd"
    "atatypes.TeecSharedMemory\022C\n\tteecValue\030\002"
    " \001(\01320.fi.aalto.ssg.opentee.imps.pbdatat"
    "ypes.TeecValue\"T\n\020TeecSharedMemory\022\017\n\007mB"
    "uffer\030\001 \002(\014\022\r\n\005mFlag\030\002 \002(\005\022\023\n\013mReturnSiz"
    "e\030\003 \001(\005\022\013\n\003mID\030\004 \001(\005\"u\n\031TeecSharedMemory"
    "Reference\022G\n\006parent\030\001 \002(\01327.fi.aalto.ssg"
    ".opentee.imps.pbdatatypes.TeecSharedMemo"
    "ry\022\017\n\007mOffset\030\002 \002(\005\"0\n\tTeecValue\022\t\n\001a\030\001 "
    "\002(\005\022\t\n\001b\030\002 \002(\005\022\r\n\005mFlag\030\003 \002(\005", 589);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GPDataTypes.proto", &protobuf_RegisterTypes);
  TeecOperation::default_instance_ = new TeecOperation();
  TeecParameter::default_instance_ = new TeecParameter();
  TeecSharedMemory::default_instance_ = new TeecSharedMemory();
  TeecSharedMemoryReference::default_instance_ = new TeecSharedMemoryReference();
  TeecValue::default_instance_ = new TeecValue();
  TeecOperation::default_instance_->InitAsDefaultInstance();
  TeecParameter::default_instance_->InitAsDefaultInstance();
  TeecSharedMemory::default_instance_->InitAsDefaultInstance();
  TeecSharedMemoryReference::default_instance_->InitAsDefaultInstance();
  TeecValue::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GPDataTypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GPDataTypes_2eproto {
  StaticDescriptorInitializer_GPDataTypes_2eproto() {
    protobuf_AddDesc_GPDataTypes_2eproto();
  }
} static_descriptor_initializer_GPDataTypes_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TeecOperation::kMStartedFieldNumber;
const int TeecOperation::kMParamsFieldNumber;
#endif  // !_MSC_VER

TeecOperation::TeecOperation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecOperation)
}

void TeecOperation::InitAsDefaultInstance() {
  mparams_ = const_cast< ::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecParameter*>(&::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecParameter::default_instance());
}

TeecOperation::TeecOperation(const TeecOperation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecOperation)
}

void TeecOperation::SharedCtor() {
  _cached_size_ = 0;
  mstarted_ = 0;
  mparams_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeecOperation::~TeecOperation() {
  // @@protoc_insertion_point(destructor:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecOperation)
  SharedDtor();
}

void TeecOperation::SharedDtor() {
  if (this != default_instance_) {
    delete mparams_;
  }
}

void TeecOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeecOperation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeecOperation_descriptor_;
}

const TeecOperation& TeecOperation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GPDataTypes_2eproto();
  return *default_instance_;
}

TeecOperation* TeecOperation::default_instance_ = NULL;

TeecOperation* TeecOperation::New() const {
  return new TeecOperation;
}

void TeecOperation::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    mstarted_ = 0;
    if (has_mparams()) {
      if (mparams_ != NULL) mparams_->::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecParameter::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeecOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecOperation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mStarted = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mstarted_)));
          set_has_mstarted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mParams;
        break;
      }

      // required .fi.aalto.ssg.opentee.imps.pbdatatypes.TeecParameter mParams = 2;
      case 2: {
        if (tag == 18) {
         parse_mParams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mparams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecOperation)
  return false;
#undef DO_
}

void TeecOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecOperation)
  // required int32 mStarted = 1;
  if (has_mstarted()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mstarted(), output);
  }

  // required .fi.aalto.ssg.opentee.imps.pbdatatypes.TeecParameter mParams = 2;
  if (has_mparams()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mparams(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecOperation)
}

::google::protobuf::uint8* TeecOperation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecOperation)
  // required int32 mStarted = 1;
  if (has_mstarted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mstarted(), target);
  }

  // required .fi.aalto.ssg.opentee.imps.pbdatatypes.TeecParameter mParams = 2;
  if (has_mparams()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mparams(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecOperation)
  return target;
}

int TeecOperation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mStarted = 1;
    if (has_mstarted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mstarted());
    }

    // required .fi.aalto.ssg.opentee.imps.pbdatatypes.TeecParameter mParams = 2;
    if (has_mparams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mparams());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeecOperation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeecOperation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeecOperation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeecOperation::MergeFrom(const TeecOperation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mstarted()) {
      set_mstarted(from.mstarted());
    }
    if (from.has_mparams()) {
      mutable_mparams()->::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecParameter::MergeFrom(from.mparams());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeecOperation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeecOperation::CopyFrom(const TeecOperation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeecOperation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_mparams()) {
    if (!this->mparams().IsInitialized()) return false;
  }
  return true;
}

void TeecOperation::Swap(TeecOperation* other) {
  if (other != this) {
    std::swap(mstarted_, other->mstarted_);
    std::swap(mparams_, other->mparams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeecOperation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeecOperation_descriptor_;
  metadata.reflection = TeecOperation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeecParameter::kTeecSharedMemoryFieldNumber;
const int TeecParameter::kTeecValueFieldNumber;
#endif  // !_MSC_VER

TeecParameter::TeecParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecParameter)
}

void TeecParameter::InitAsDefaultInstance() {
  teecsharedmemory_ = const_cast< ::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecSharedMemory*>(&::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecSharedMemory::default_instance());
  teecvalue_ = const_cast< ::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecValue*>(&::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecValue::default_instance());
}

TeecParameter::TeecParameter(const TeecParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecParameter)
}

void TeecParameter::SharedCtor() {
  _cached_size_ = 0;
  teecsharedmemory_ = NULL;
  teecvalue_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeecParameter::~TeecParameter() {
  // @@protoc_insertion_point(destructor:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecParameter)
  SharedDtor();
}

void TeecParameter::SharedDtor() {
  if (this != default_instance_) {
    delete teecsharedmemory_;
    delete teecvalue_;
  }
}

void TeecParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeecParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeecParameter_descriptor_;
}

const TeecParameter& TeecParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GPDataTypes_2eproto();
  return *default_instance_;
}

TeecParameter* TeecParameter::default_instance_ = NULL;

TeecParameter* TeecParameter::New() const {
  return new TeecParameter;
}

void TeecParameter::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_teecsharedmemory()) {
      if (teecsharedmemory_ != NULL) teecsharedmemory_->::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecSharedMemory::Clear();
    }
    if (has_teecvalue()) {
      if (teecvalue_ != NULL) teecvalue_->::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecValue::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeecParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory teecSharedMemory = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teecsharedmemory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_teecValue;
        break;
      }

      // optional .fi.aalto.ssg.opentee.imps.pbdatatypes.TeecValue teecValue = 2;
      case 2: {
        if (tag == 18) {
         parse_teecValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teecvalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecParameter)
  return false;
#undef DO_
}

void TeecParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecParameter)
  // optional .fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory teecSharedMemory = 1;
  if (has_teecsharedmemory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teecsharedmemory(), output);
  }

  // optional .fi.aalto.ssg.opentee.imps.pbdatatypes.TeecValue teecValue = 2;
  if (has_teecvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teecvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecParameter)
}

::google::protobuf::uint8* TeecParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecParameter)
  // optional .fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory teecSharedMemory = 1;
  if (has_teecsharedmemory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teecsharedmemory(), target);
  }

  // optional .fi.aalto.ssg.opentee.imps.pbdatatypes.TeecValue teecValue = 2;
  if (has_teecvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->teecvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecParameter)
  return target;
}

int TeecParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory teecSharedMemory = 1;
    if (has_teecsharedmemory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teecsharedmemory());
    }

    // optional .fi.aalto.ssg.opentee.imps.pbdatatypes.TeecValue teecValue = 2;
    if (has_teecvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teecvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeecParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeecParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeecParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeecParameter::MergeFrom(const TeecParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teecsharedmemory()) {
      mutable_teecsharedmemory()->::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecSharedMemory::MergeFrom(from.teecsharedmemory());
    }
    if (from.has_teecvalue()) {
      mutable_teecvalue()->::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecValue::MergeFrom(from.teecvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeecParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeecParameter::CopyFrom(const TeecParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeecParameter::IsInitialized() const {

  if (has_teecsharedmemory()) {
    if (!this->teecsharedmemory().IsInitialized()) return false;
  }
  if (has_teecvalue()) {
    if (!this->teecvalue().IsInitialized()) return false;
  }
  return true;
}

void TeecParameter::Swap(TeecParameter* other) {
  if (other != this) {
    std::swap(teecsharedmemory_, other->teecsharedmemory_);
    std::swap(teecvalue_, other->teecvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeecParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeecParameter_descriptor_;
  metadata.reflection = TeecParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeecSharedMemory::kMBufferFieldNumber;
const int TeecSharedMemory::kMFlagFieldNumber;
const int TeecSharedMemory::kMReturnSizeFieldNumber;
const int TeecSharedMemory::kMIDFieldNumber;
#endif  // !_MSC_VER

TeecSharedMemory::TeecSharedMemory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory)
}

void TeecSharedMemory::InitAsDefaultInstance() {
}

TeecSharedMemory::TeecSharedMemory(const TeecSharedMemory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory)
}

void TeecSharedMemory::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mbuffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mflag_ = 0;
  mreturnsize_ = 0;
  mid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeecSharedMemory::~TeecSharedMemory() {
  // @@protoc_insertion_point(destructor:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory)
  SharedDtor();
}

void TeecSharedMemory::SharedDtor() {
  if (mbuffer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mbuffer_;
  }
  if (this != default_instance_) {
  }
}

void TeecSharedMemory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeecSharedMemory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeecSharedMemory_descriptor_;
}

const TeecSharedMemory& TeecSharedMemory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GPDataTypes_2eproto();
  return *default_instance_;
}

TeecSharedMemory* TeecSharedMemory::default_instance_ = NULL;

TeecSharedMemory* TeecSharedMemory::New() const {
  return new TeecSharedMemory;
}

void TeecSharedMemory::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TeecSharedMemory*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(mflag_, mid_);
    if (has_mbuffer()) {
      if (mbuffer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mbuffer_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeecSharedMemory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes mBuffer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mbuffer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mFlag;
        break;
      }

      // required int32 mFlag = 2;
      case 2: {
        if (tag == 16) {
         parse_mFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mflag_)));
          set_has_mflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mReturnSize;
        break;
      }

      // optional int32 mReturnSize = 3;
      case 3: {
        if (tag == 24) {
         parse_mReturnSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mreturnsize_)));
          set_has_mreturnsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mID;
        break;
      }

      // optional int32 mID = 4;
      case 4: {
        if (tag == 32) {
         parse_mID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mid_)));
          set_has_mid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory)
  return false;
#undef DO_
}

void TeecSharedMemory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory)
  // required bytes mBuffer = 1;
  if (has_mbuffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->mbuffer(), output);
  }

  // required int32 mFlag = 2;
  if (has_mflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mflag(), output);
  }

  // optional int32 mReturnSize = 3;
  if (has_mreturnsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mreturnsize(), output);
  }

  // optional int32 mID = 4;
  if (has_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory)
}

::google::protobuf::uint8* TeecSharedMemory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory)
  // required bytes mBuffer = 1;
  if (has_mbuffer()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->mbuffer(), target);
  }

  // required int32 mFlag = 2;
  if (has_mflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mflag(), target);
  }

  // optional int32 mReturnSize = 3;
  if (has_mreturnsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mreturnsize(), target);
  }

  // optional int32 mID = 4;
  if (has_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory)
  return target;
}

int TeecSharedMemory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes mBuffer = 1;
    if (has_mbuffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mbuffer());
    }

    // required int32 mFlag = 2;
    if (has_mflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mflag());
    }

    // optional int32 mReturnSize = 3;
    if (has_mreturnsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mreturnsize());
    }

    // optional int32 mID = 4;
    if (has_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeecSharedMemory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeecSharedMemory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeecSharedMemory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeecSharedMemory::MergeFrom(const TeecSharedMemory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mbuffer()) {
      set_mbuffer(from.mbuffer());
    }
    if (from.has_mflag()) {
      set_mflag(from.mflag());
    }
    if (from.has_mreturnsize()) {
      set_mreturnsize(from.mreturnsize());
    }
    if (from.has_mid()) {
      set_mid(from.mid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeecSharedMemory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeecSharedMemory::CopyFrom(const TeecSharedMemory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeecSharedMemory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TeecSharedMemory::Swap(TeecSharedMemory* other) {
  if (other != this) {
    std::swap(mbuffer_, other->mbuffer_);
    std::swap(mflag_, other->mflag_);
    std::swap(mreturnsize_, other->mreturnsize_);
    std::swap(mid_, other->mid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeecSharedMemory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeecSharedMemory_descriptor_;
  metadata.reflection = TeecSharedMemory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeecSharedMemoryReference::kParentFieldNumber;
const int TeecSharedMemoryReference::kMOffsetFieldNumber;
#endif  // !_MSC_VER

TeecSharedMemoryReference::TeecSharedMemoryReference()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemoryReference)
}

void TeecSharedMemoryReference::InitAsDefaultInstance() {
  parent_ = const_cast< ::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecSharedMemory*>(&::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecSharedMemory::default_instance());
}

TeecSharedMemoryReference::TeecSharedMemoryReference(const TeecSharedMemoryReference& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemoryReference)
}

void TeecSharedMemoryReference::SharedCtor() {
  _cached_size_ = 0;
  parent_ = NULL;
  moffset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeecSharedMemoryReference::~TeecSharedMemoryReference() {
  // @@protoc_insertion_point(destructor:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemoryReference)
  SharedDtor();
}

void TeecSharedMemoryReference::SharedDtor() {
  if (this != default_instance_) {
    delete parent_;
  }
}

void TeecSharedMemoryReference::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeecSharedMemoryReference::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeecSharedMemoryReference_descriptor_;
}

const TeecSharedMemoryReference& TeecSharedMemoryReference::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GPDataTypes_2eproto();
  return *default_instance_;
}

TeecSharedMemoryReference* TeecSharedMemoryReference::default_instance_ = NULL;

TeecSharedMemoryReference* TeecSharedMemoryReference::New() const {
  return new TeecSharedMemoryReference;
}

void TeecSharedMemoryReference::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_parent()) {
      if (parent_ != NULL) parent_->::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecSharedMemory::Clear();
    }
    moffset_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeecSharedMemoryReference::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemoryReference)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory parent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mOffset;
        break;
      }

      // required int32 mOffset = 2;
      case 2: {
        if (tag == 16) {
         parse_mOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moffset_)));
          set_has_moffset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemoryReference)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemoryReference)
  return false;
#undef DO_
}

void TeecSharedMemoryReference::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemoryReference)
  // required .fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory parent = 1;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->parent(), output);
  }

  // required int32 mOffset = 2;
  if (has_moffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->moffset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemoryReference)
}

::google::protobuf::uint8* TeecSharedMemoryReference::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemoryReference)
  // required .fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory parent = 1;
  if (has_parent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->parent(), target);
  }

  // required int32 mOffset = 2;
  if (has_moffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->moffset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemoryReference)
  return target;
}

int TeecSharedMemoryReference::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory parent = 1;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parent());
    }

    // required int32 mOffset = 2;
    if (has_moffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moffset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeecSharedMemoryReference::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeecSharedMemoryReference* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeecSharedMemoryReference*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeecSharedMemoryReference::MergeFrom(const TeecSharedMemoryReference& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parent()) {
      mutable_parent()->::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecSharedMemory::MergeFrom(from.parent());
    }
    if (from.has_moffset()) {
      set_moffset(from.moffset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeecSharedMemoryReference::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeecSharedMemoryReference::CopyFrom(const TeecSharedMemoryReference& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeecSharedMemoryReference::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_parent()) {
    if (!this->parent().IsInitialized()) return false;
  }
  return true;
}

void TeecSharedMemoryReference::Swap(TeecSharedMemoryReference* other) {
  if (other != this) {
    std::swap(parent_, other->parent_);
    std::swap(moffset_, other->moffset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeecSharedMemoryReference::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeecSharedMemoryReference_descriptor_;
  metadata.reflection = TeecSharedMemoryReference_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeecValue::kAFieldNumber;
const int TeecValue::kBFieldNumber;
const int TeecValue::kMFlagFieldNumber;
#endif  // !_MSC_VER

TeecValue::TeecValue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecValue)
}

void TeecValue::InitAsDefaultInstance() {
}

TeecValue::TeecValue(const TeecValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecValue)
}

void TeecValue::SharedCtor() {
  _cached_size_ = 0;
  a_ = 0;
  b_ = 0;
  mflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeecValue::~TeecValue() {
  // @@protoc_insertion_point(destructor:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecValue)
  SharedDtor();
}

void TeecValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeecValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeecValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeecValue_descriptor_;
}

const TeecValue& TeecValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GPDataTypes_2eproto();
  return *default_instance_;
}

TeecValue* TeecValue::default_instance_ = NULL;

TeecValue* TeecValue::New() const {
  return new TeecValue;
}

void TeecValue::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TeecValue*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(a_, mflag_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeecValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 a = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_b;
        break;
      }

      // required int32 b = 2;
      case 2: {
        if (tag == 16) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mFlag;
        break;
      }

      // required int32 mFlag = 3;
      case 3: {
        if (tag == 24) {
         parse_mFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mflag_)));
          set_has_mflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecValue)
  return false;
#undef DO_
}

void TeecValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecValue)
  // required int32 a = 1;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->a(), output);
  }

  // required int32 b = 2;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->b(), output);
  }

  // required int32 mFlag = 3;
  if (has_mflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecValue)
}

::google::protobuf::uint8* TeecValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecValue)
  // required int32 a = 1;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->a(), target);
  }

  // required int32 b = 2;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->b(), target);
  }

  // required int32 mFlag = 3;
  if (has_mflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecValue)
  return target;
}

int TeecValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 a = 1;
    if (has_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a());
    }

    // required int32 b = 2;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b());
    }

    // required int32 mFlag = 3;
    if (has_mflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mflag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeecValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeecValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeecValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeecValue::MergeFrom(const TeecValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
    if (from.has_mflag()) {
      set_mflag(from.mflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeecValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeecValue::CopyFrom(const TeecValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeecValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TeecValue::Swap(TeecValue* other) {
  if (other != this) {
    std::swap(a_, other->a_);
    std::swap(b_, other->b_);
    std::swap(mflag_, other->mflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeecValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeecValue_descriptor_;
  metadata.reflection = TeecValue_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbdatatypes
}  // namespace imps
}  // namespace opentee
}  // namespace ssg
}  // namespace aalto
}  // namespace fi

// @@protoc_insertion_point(global_scope)
