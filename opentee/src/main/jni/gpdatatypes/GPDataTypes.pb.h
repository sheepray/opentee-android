// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GPDataTypes.proto

#ifndef PROTOBUF_GPDataTypes_2eproto__INCLUDED
#define PROTOBUF_GPDataTypes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace fi {
namespace aalto {
namespace ssg {
namespace opentee {
namespace imps {
namespace pbdatatypes {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GPDataTypes_2eproto();
void protobuf_AssignDesc_GPDataTypes_2eproto();
void protobuf_ShutdownFile_GPDataTypes_2eproto();

class TeecOperation;
class TeecParameter;
class TeecSharedMemory;
class TeecValue;

// ===================================================================

class TeecOperation : public ::google::protobuf::Message {
 public:
  TeecOperation();
  virtual ~TeecOperation();

  TeecOperation(const TeecOperation& from);

  inline TeecOperation& operator=(const TeecOperation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeecOperation& default_instance();

  void Swap(TeecOperation* other);

  // implements Message ----------------------------------------------

  TeecOperation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeecOperation& from);
  void MergeFrom(const TeecOperation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 mStarted = 1;
  inline bool has_mstarted() const;
  inline void clear_mstarted();
  static const int kMStartedFieldNumber = 1;
  inline ::google::protobuf::int32 mstarted() const;
  inline void set_mstarted(::google::protobuf::int32 value);

  // required .fi.aalto.ssg.opentee.imps.pbdatatypes.TeecParameter mParams = 2;
  inline bool has_mparams() const;
  inline void clear_mparams();
  static const int kMParamsFieldNumber = 2;
  inline const ::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecParameter& mparams() const;
  inline ::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecParameter* mutable_mparams();
  inline ::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecParameter* release_mparams();
  inline void set_allocated_mparams(::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecParameter* mparams);

  // @@protoc_insertion_point(class_scope:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecOperation)
 private:
  inline void set_has_mstarted();
  inline void clear_has_mstarted();
  inline void set_has_mparams();
  inline void clear_has_mparams();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecParameter* mparams_;
  ::google::protobuf::int32 mstarted_;
  friend void  protobuf_AddDesc_GPDataTypes_2eproto();
  friend void protobuf_AssignDesc_GPDataTypes_2eproto();
  friend void protobuf_ShutdownFile_GPDataTypes_2eproto();

  void InitAsDefaultInstance();
  static TeecOperation* default_instance_;
};
// -------------------------------------------------------------------

class TeecParameter : public ::google::protobuf::Message {
 public:
  TeecParameter();
  virtual ~TeecParameter();

  TeecParameter(const TeecParameter& from);

  inline TeecParameter& operator=(const TeecParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeecParameter& default_instance();

  void Swap(TeecParameter* other);

  // implements Message ----------------------------------------------

  TeecParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeecParameter& from);
  void MergeFrom(const TeecParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory teecSharedMemory = 1;
  inline bool has_teecsharedmemory() const;
  inline void clear_teecsharedmemory();
  static const int kTeecSharedMemoryFieldNumber = 1;
  inline const ::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecSharedMemory& teecsharedmemory() const;
  inline ::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecSharedMemory* mutable_teecsharedmemory();
  inline ::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecSharedMemory* release_teecsharedmemory();
  inline void set_allocated_teecsharedmemory(::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecSharedMemory* teecsharedmemory);

  // optional .fi.aalto.ssg.opentee.imps.pbdatatypes.TeecValue teecValue = 2;
  inline bool has_teecvalue() const;
  inline void clear_teecvalue();
  static const int kTeecValueFieldNumber = 2;
  inline const ::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecValue& teecvalue() const;
  inline ::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecValue* mutable_teecvalue();
  inline ::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecValue* release_teecvalue();
  inline void set_allocated_teecvalue(::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecValue* teecvalue);

  // @@protoc_insertion_point(class_scope:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecParameter)
 private:
  inline void set_has_teecsharedmemory();
  inline void clear_has_teecsharedmemory();
  inline void set_has_teecvalue();
  inline void clear_has_teecvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecSharedMemory* teecsharedmemory_;
  ::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecValue* teecvalue_;
  friend void  protobuf_AddDesc_GPDataTypes_2eproto();
  friend void protobuf_AssignDesc_GPDataTypes_2eproto();
  friend void protobuf_ShutdownFile_GPDataTypes_2eproto();

  void InitAsDefaultInstance();
  static TeecParameter* default_instance_;
};
// -------------------------------------------------------------------

class TeecSharedMemory : public ::google::protobuf::Message {
 public:
  TeecSharedMemory();
  virtual ~TeecSharedMemory();

  TeecSharedMemory(const TeecSharedMemory& from);

  inline TeecSharedMemory& operator=(const TeecSharedMemory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeecSharedMemory& default_instance();

  void Swap(TeecSharedMemory* other);

  // implements Message ----------------------------------------------

  TeecSharedMemory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeecSharedMemory& from);
  void MergeFrom(const TeecSharedMemory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes mBuffer = 1;
  inline bool has_mbuffer() const;
  inline void clear_mbuffer();
  static const int kMBufferFieldNumber = 1;
  inline const ::std::string& mbuffer() const;
  inline void set_mbuffer(const ::std::string& value);
  inline void set_mbuffer(const char* value);
  inline void set_mbuffer(const void* value, size_t size);
  inline ::std::string* mutable_mbuffer();
  inline ::std::string* release_mbuffer();
  inline void set_allocated_mbuffer(::std::string* mbuffer);

  // required int32 mFlag = 2;
  inline bool has_mflag() const;
  inline void clear_mflag();
  static const int kMFlagFieldNumber = 2;
  inline ::google::protobuf::int32 mflag() const;
  inline void set_mflag(::google::protobuf::int32 value);

  // optional int32 mReturnSize = 3;
  inline bool has_mreturnsize() const;
  inline void clear_mreturnsize();
  static const int kMReturnSizeFieldNumber = 3;
  inline ::google::protobuf::int32 mreturnsize() const;
  inline void set_mreturnsize(::google::protobuf::int32 value);

  // optional int32 mIDInJni = 4;
  inline bool has_midinjni() const;
  inline void clear_midinjni();
  static const int kMIDInJniFieldNumber = 4;
  inline ::google::protobuf::int32 midinjni() const;
  inline void set_midinjni(::google::protobuf::int32 value);

  // optional int32 mID = 5;
  inline bool has_mid() const;
  inline void clear_mid();
  static const int kMIDFieldNumber = 5;
  inline ::google::protobuf::int32 mid() const;
  inline void set_mid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory)
 private:
  inline void set_has_mbuffer();
  inline void clear_has_mbuffer();
  inline void set_has_mflag();
  inline void clear_has_mflag();
  inline void set_has_mreturnsize();
  inline void clear_has_mreturnsize();
  inline void set_has_midinjni();
  inline void clear_has_midinjni();
  inline void set_has_mid();
  inline void clear_has_mid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* mbuffer_;
  ::google::protobuf::int32 mflag_;
  ::google::protobuf::int32 mreturnsize_;
  ::google::protobuf::int32 midinjni_;
  ::google::protobuf::int32 mid_;
  friend void  protobuf_AddDesc_GPDataTypes_2eproto();
  friend void protobuf_AssignDesc_GPDataTypes_2eproto();
  friend void protobuf_ShutdownFile_GPDataTypes_2eproto();

  void InitAsDefaultInstance();
  static TeecSharedMemory* default_instance_;
};
// -------------------------------------------------------------------

class TeecValue : public ::google::protobuf::Message {
 public:
  TeecValue();
  virtual ~TeecValue();

  TeecValue(const TeecValue& from);

  inline TeecValue& operator=(const TeecValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeecValue& default_instance();

  void Swap(TeecValue* other);

  // implements Message ----------------------------------------------

  TeecValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeecValue& from);
  void MergeFrom(const TeecValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 a = 1;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 1;
  inline ::google::protobuf::int32 a() const;
  inline void set_a(::google::protobuf::int32 value);

  // required int32 b = 2;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 2;
  inline ::google::protobuf::int32 b() const;
  inline void set_b(::google::protobuf::int32 value);

  // required int32 mFlag = 3;
  inline bool has_mflag() const;
  inline void clear_mflag();
  static const int kMFlagFieldNumber = 3;
  inline ::google::protobuf::int32 mflag() const;
  inline void set_mflag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecValue)
 private:
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_b();
  inline void clear_has_b();
  inline void set_has_mflag();
  inline void clear_has_mflag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 a_;
  ::google::protobuf::int32 b_;
  ::google::protobuf::int32 mflag_;
  friend void  protobuf_AddDesc_GPDataTypes_2eproto();
  friend void protobuf_AssignDesc_GPDataTypes_2eproto();
  friend void protobuf_ShutdownFile_GPDataTypes_2eproto();

  void InitAsDefaultInstance();
  static TeecValue* default_instance_;
};
// ===================================================================


// ===================================================================

// TeecOperation

// required int32 mStarted = 1;
inline bool TeecOperation::has_mstarted() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeecOperation::set_has_mstarted() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeecOperation::clear_has_mstarted() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeecOperation::clear_mstarted() {
  mstarted_ = 0;
  clear_has_mstarted();
}
inline ::google::protobuf::int32 TeecOperation::mstarted() const {
  // @@protoc_insertion_point(field_get:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecOperation.mStarted)
  return mstarted_;
}
inline void TeecOperation::set_mstarted(::google::protobuf::int32 value) {
  set_has_mstarted();
  mstarted_ = value;
  // @@protoc_insertion_point(field_set:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecOperation.mStarted)
}

// required .fi.aalto.ssg.opentee.imps.pbdatatypes.TeecParameter mParams = 2;
inline bool TeecOperation::has_mparams() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeecOperation::set_has_mparams() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeecOperation::clear_has_mparams() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeecOperation::clear_mparams() {
  if (mparams_ != NULL) mparams_->::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecParameter::Clear();
  clear_has_mparams();
}
inline const ::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecParameter& TeecOperation::mparams() const {
  // @@protoc_insertion_point(field_get:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecOperation.mParams)
  return mparams_ != NULL ? *mparams_ : *default_instance_->mparams_;
}
inline ::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecParameter* TeecOperation::mutable_mparams() {
  set_has_mparams();
  if (mparams_ == NULL) mparams_ = new ::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecParameter;
  // @@protoc_insertion_point(field_mutable:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecOperation.mParams)
  return mparams_;
}
inline ::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecParameter* TeecOperation::release_mparams() {
  clear_has_mparams();
  ::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecParameter* temp = mparams_;
  mparams_ = NULL;
  return temp;
}
inline void TeecOperation::set_allocated_mparams(::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecParameter* mparams) {
  delete mparams_;
  mparams_ = mparams;
  if (mparams) {
    set_has_mparams();
  } else {
    clear_has_mparams();
  }
  // @@protoc_insertion_point(field_set_allocated:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecOperation.mParams)
}

// -------------------------------------------------------------------

// TeecParameter

// optional .fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory teecSharedMemory = 1;
inline bool TeecParameter::has_teecsharedmemory() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeecParameter::set_has_teecsharedmemory() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeecParameter::clear_has_teecsharedmemory() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeecParameter::clear_teecsharedmemory() {
  if (teecsharedmemory_ != NULL) teecsharedmemory_->::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecSharedMemory::Clear();
  clear_has_teecsharedmemory();
}
inline const ::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecSharedMemory& TeecParameter::teecsharedmemory() const {
  // @@protoc_insertion_point(field_get:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecParameter.teecSharedMemory)
  return teecsharedmemory_ != NULL ? *teecsharedmemory_ : *default_instance_->teecsharedmemory_;
}
inline ::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecSharedMemory* TeecParameter::mutable_teecsharedmemory() {
  set_has_teecsharedmemory();
  if (teecsharedmemory_ == NULL) teecsharedmemory_ = new ::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecSharedMemory;
  // @@protoc_insertion_point(field_mutable:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecParameter.teecSharedMemory)
  return teecsharedmemory_;
}
inline ::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecSharedMemory* TeecParameter::release_teecsharedmemory() {
  clear_has_teecsharedmemory();
  ::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecSharedMemory* temp = teecsharedmemory_;
  teecsharedmemory_ = NULL;
  return temp;
}
inline void TeecParameter::set_allocated_teecsharedmemory(::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecSharedMemory* teecsharedmemory) {
  delete teecsharedmemory_;
  teecsharedmemory_ = teecsharedmemory;
  if (teecsharedmemory) {
    set_has_teecsharedmemory();
  } else {
    clear_has_teecsharedmemory();
  }
  // @@protoc_insertion_point(field_set_allocated:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecParameter.teecSharedMemory)
}

// optional .fi.aalto.ssg.opentee.imps.pbdatatypes.TeecValue teecValue = 2;
inline bool TeecParameter::has_teecvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeecParameter::set_has_teecvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeecParameter::clear_has_teecvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeecParameter::clear_teecvalue() {
  if (teecvalue_ != NULL) teecvalue_->::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecValue::Clear();
  clear_has_teecvalue();
}
inline const ::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecValue& TeecParameter::teecvalue() const {
  // @@protoc_insertion_point(field_get:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecParameter.teecValue)
  return teecvalue_ != NULL ? *teecvalue_ : *default_instance_->teecvalue_;
}
inline ::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecValue* TeecParameter::mutable_teecvalue() {
  set_has_teecvalue();
  if (teecvalue_ == NULL) teecvalue_ = new ::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecValue;
  // @@protoc_insertion_point(field_mutable:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecParameter.teecValue)
  return teecvalue_;
}
inline ::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecValue* TeecParameter::release_teecvalue() {
  clear_has_teecvalue();
  ::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecValue* temp = teecvalue_;
  teecvalue_ = NULL;
  return temp;
}
inline void TeecParameter::set_allocated_teecvalue(::fi::aalto::ssg::opentee::imps::pbdatatypes::TeecValue* teecvalue) {
  delete teecvalue_;
  teecvalue_ = teecvalue;
  if (teecvalue) {
    set_has_teecvalue();
  } else {
    clear_has_teecvalue();
  }
  // @@protoc_insertion_point(field_set_allocated:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecParameter.teecValue)
}

// -------------------------------------------------------------------

// TeecSharedMemory

// required bytes mBuffer = 1;
inline bool TeecSharedMemory::has_mbuffer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeecSharedMemory::set_has_mbuffer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeecSharedMemory::clear_has_mbuffer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeecSharedMemory::clear_mbuffer() {
  if (mbuffer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mbuffer_->clear();
  }
  clear_has_mbuffer();
}
inline const ::std::string& TeecSharedMemory::mbuffer() const {
  // @@protoc_insertion_point(field_get:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory.mBuffer)
  return *mbuffer_;
}
inline void TeecSharedMemory::set_mbuffer(const ::std::string& value) {
  set_has_mbuffer();
  if (mbuffer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mbuffer_ = new ::std::string;
  }
  mbuffer_->assign(value);
  // @@protoc_insertion_point(field_set:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory.mBuffer)
}
inline void TeecSharedMemory::set_mbuffer(const char* value) {
  set_has_mbuffer();
  if (mbuffer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mbuffer_ = new ::std::string;
  }
  mbuffer_->assign(value);
  // @@protoc_insertion_point(field_set_char:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory.mBuffer)
}
inline void TeecSharedMemory::set_mbuffer(const void* value, size_t size) {
  set_has_mbuffer();
  if (mbuffer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mbuffer_ = new ::std::string;
  }
  mbuffer_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory.mBuffer)
}
inline ::std::string* TeecSharedMemory::mutable_mbuffer() {
  set_has_mbuffer();
  if (mbuffer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mbuffer_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory.mBuffer)
  return mbuffer_;
}
inline ::std::string* TeecSharedMemory::release_mbuffer() {
  clear_has_mbuffer();
  if (mbuffer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mbuffer_;
    mbuffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TeecSharedMemory::set_allocated_mbuffer(::std::string* mbuffer) {
  if (mbuffer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mbuffer_;
  }
  if (mbuffer) {
    set_has_mbuffer();
    mbuffer_ = mbuffer;
  } else {
    clear_has_mbuffer();
    mbuffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory.mBuffer)
}

// required int32 mFlag = 2;
inline bool TeecSharedMemory::has_mflag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeecSharedMemory::set_has_mflag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeecSharedMemory::clear_has_mflag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeecSharedMemory::clear_mflag() {
  mflag_ = 0;
  clear_has_mflag();
}
inline ::google::protobuf::int32 TeecSharedMemory::mflag() const {
  // @@protoc_insertion_point(field_get:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory.mFlag)
  return mflag_;
}
inline void TeecSharedMemory::set_mflag(::google::protobuf::int32 value) {
  set_has_mflag();
  mflag_ = value;
  // @@protoc_insertion_point(field_set:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory.mFlag)
}

// optional int32 mReturnSize = 3;
inline bool TeecSharedMemory::has_mreturnsize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeecSharedMemory::set_has_mreturnsize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeecSharedMemory::clear_has_mreturnsize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeecSharedMemory::clear_mreturnsize() {
  mreturnsize_ = 0;
  clear_has_mreturnsize();
}
inline ::google::protobuf::int32 TeecSharedMemory::mreturnsize() const {
  // @@protoc_insertion_point(field_get:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory.mReturnSize)
  return mreturnsize_;
}
inline void TeecSharedMemory::set_mreturnsize(::google::protobuf::int32 value) {
  set_has_mreturnsize();
  mreturnsize_ = value;
  // @@protoc_insertion_point(field_set:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory.mReturnSize)
}

// optional int32 mIDInJni = 4;
inline bool TeecSharedMemory::has_midinjni() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeecSharedMemory::set_has_midinjni() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeecSharedMemory::clear_has_midinjni() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeecSharedMemory::clear_midinjni() {
  midinjni_ = 0;
  clear_has_midinjni();
}
inline ::google::protobuf::int32 TeecSharedMemory::midinjni() const {
  // @@protoc_insertion_point(field_get:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory.mIDInJni)
  return midinjni_;
}
inline void TeecSharedMemory::set_midinjni(::google::protobuf::int32 value) {
  set_has_midinjni();
  midinjni_ = value;
  // @@protoc_insertion_point(field_set:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory.mIDInJni)
}

// optional int32 mID = 5;
inline bool TeecSharedMemory::has_mid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TeecSharedMemory::set_has_mid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TeecSharedMemory::clear_has_mid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TeecSharedMemory::clear_mid() {
  mid_ = 0;
  clear_has_mid();
}
inline ::google::protobuf::int32 TeecSharedMemory::mid() const {
  // @@protoc_insertion_point(field_get:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory.mID)
  return mid_;
}
inline void TeecSharedMemory::set_mid(::google::protobuf::int32 value) {
  set_has_mid();
  mid_ = value;
  // @@protoc_insertion_point(field_set:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecSharedMemory.mID)
}

// -------------------------------------------------------------------

// TeecValue

// required int32 a = 1;
inline bool TeecValue::has_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeecValue::set_has_a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeecValue::clear_has_a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeecValue::clear_a() {
  a_ = 0;
  clear_has_a();
}
inline ::google::protobuf::int32 TeecValue::a() const {
  // @@protoc_insertion_point(field_get:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecValue.a)
  return a_;
}
inline void TeecValue::set_a(::google::protobuf::int32 value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecValue.a)
}

// required int32 b = 2;
inline bool TeecValue::has_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeecValue::set_has_b() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeecValue::clear_has_b() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeecValue::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline ::google::protobuf::int32 TeecValue::b() const {
  // @@protoc_insertion_point(field_get:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecValue.b)
  return b_;
}
inline void TeecValue::set_b(::google::protobuf::int32 value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecValue.b)
}

// required int32 mFlag = 3;
inline bool TeecValue::has_mflag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeecValue::set_has_mflag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeecValue::clear_has_mflag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeecValue::clear_mflag() {
  mflag_ = 0;
  clear_has_mflag();
}
inline ::google::protobuf::int32 TeecValue::mflag() const {
  // @@protoc_insertion_point(field_get:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecValue.mFlag)
  return mflag_;
}
inline void TeecValue::set_mflag(::google::protobuf::int32 value) {
  set_has_mflag();
  mflag_ = value;
  // @@protoc_insertion_point(field_set:fi.aalto.ssg.opentee.imps.pbdatatypes.TeecValue.mFlag)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbdatatypes
}  // namespace imps
}  // namespace opentee
}  // namespace ssg
}  // namespace aalto
}  // namespace fi

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GPDataTypes_2eproto__INCLUDED
